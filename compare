from instream import InStream
from outstream import OutStream
from sketch import Sketch
from bs4 import BeautifulSoup
import time
import json
import requests


k = 5
d = 10000


class PageBroken(Exception):
    def __init__(self, message):
        Exception.__init__(self, message)


class ConnectionError(Exception):
    def __init__(self, message):
        Exception.__init__(self, message)


class InvalidAdress(Exception):
    def __init__(self, message):
        Exception.__init__(self, message)


class JokesGrabber:
    def __init__(self, website):
        self._website = website

    def getjokes(self):
        all_jokes = []
        try:
            with open('jokes.json') as f:
                all_jokes = json.load(f, object_hook=None)
        except FileNotFoundError:
            with open('jokes.json', 'w') as f:
                for i in range(2, 3):
                    try:
                        page = InStream(self._website + str(i))
                        html = page.readAll()
                    except IOError:
                        try:
                            page = InStream("https://yandex.ru")
                        except IOError:
                            raise ConnectionError("You are disconnected from Internet")
                        else:
                            raise InvalidAdress("No such website: " + self._website)
                    end = 0
                    trade = 0
                    while trade != -1:
                        trade = html.find('<section class="body">', end)
                        if trade == -1 and end == 0:
                            raise PageBroken(
                                "Error during parsing occurred: check front-end web development of " + self._website)
                        beg = html.find('>', trade)
                        end = html.find('</section>', beg)
                        joke = html[beg + 1:end]
                        joke = joke.replace('<br />', '')
                        joke = joke.replace('&quot;', '')
                        joke = joke.replace('            ', '')
                        joke = joke.replace('        ', '')
                        joke = joke.replace('\r', '')
                        joke = joke.replace('\n', '')
                        all_jokes += [joke]
                    json.dump(all_jokes[0:len(all_jokes)-1], f, ensure_ascii=False)
        return all_jokes


class NewsGrabber:
    def __init__(self, website):
        self._website = website

    def getnews(self):
        try:
            with open('news.json') as f:
                all_news = json.load(f, object_hook=None)
        except FileNotFoundError:
            with open('news.json', 'w') as f:
                try:
                    page = requests.get(self._website)
                except IOError:
                    try:
                        page = requests.get("https://yandex.ru")
                    except IOError:
                        raise ConnectionError("You are disconnected from Internet")
                    else:
                        raise InvalidAdress("No such website: " + self._website)
                soup = BeautifulSoup(page.text, 'html.parser')
                text = str(soup.get_text())
                n = text.partition("Еще сюжеты")[2]
                if n == "":
                    raise PageBroken(
                        "Error during parsing occurred: check front-end web development of " + self._website)
                t = n.partition("Нал.")[0]
                if t == "":
                    raise PageBroken(
                        "Error during parsing occurred: check front-end web development of " + self._website)
                all_news = []
                for i in t.split('\n'):
                    if (i != "") and (i.isspace() == False):
                        all_news += [i]
                json.dump(all_news[4:len(all_news)], f, ensure_ascii=False)


class Jokes:
    def __init__(self, filename):
        self._name = filename

    def jokes(self):
        with open(self._name) as f:
            all_jokes = json.load(f, object_hook=None)
            a = []
            for str in all_jokes:
                a += [[str, Sketch(str, k, d)]]
        return a


class News:
    def __init__(self, filename):
        self._name = filename

    def news(self):
        f = open(self._name)
        all_news = json.load(f, object_hook=None)
        a = []
        for str in all_news:
            a += [[str, Sketch(str, k, d)]]
        f.close()
        return a


class Compare:
    def __init__(self, file1, file2):
        n = News(file1)
        j = Jokes(file2)
        self._news = n.news()
        self._jokes = j.jokes()

    def compare(self):
        max = []
        news = self._news
        jokes = self._jokes
        for i in range(len(news)):
            m = 0.0
            k = 0
            for j in range(len(jokes)):
                if news[i][1].similarTo(jokes[j][1]) > m:
                    m = news[i][1].similarTo(jokes[j][1])
                    k = j
            max += [k]
        try:
            with open('result.json') as f:
                temp = json.load(f, object_hook=None)
        except FileNotFoundError:
            with open('result.json', 'w') as f:
                res = []
                for i in range(len(news)):
                    res += [[news[i][0], jokes[max[i]][0]]]
                json.dump(res, f, ensure_ascii=False)



def main():
    file1 = "news.json"
    file2 = "jokes.json"
    web1 = "https://www.rbc.ru"
    web2 = "http://laps.zahav.ru/jokes/list/"
    while True:
        try:
            news = NewsGrabber(web1)
            grab = JokesGrabber(web2)
            news.getnews()
            grab.getjokes()
            res = Compare(file1, file2)
            res.compare()
            break
        except ConnectionError as err1:
            print(err1)
            time.sleep(10)
        except InvalidAdress as err2:
            print(err2)
            print("Enter: \n'q' to stop running\n'n' to enter another news website\n'j' to enter another jokes website")
            t = input()
            if t == 'q':
                break
            if t == 'n':
                web1 = input()
            if t == 'j':
                web2 = input()
        except PageBroken as err3:
            print(err3)
            print("Enter 'q' to stop running")
            t = input()
            if t == 'q':
                break
            else:
                continue





if __name__ == '__main__':
    main()
